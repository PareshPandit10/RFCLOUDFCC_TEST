// source: RFCloudFCC_PROTO_v3.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.servercomm.DeviceStatus', null, global);
goog.exportSymbol('proto.servercomm.NozzleTotalizer', null, global);
goog.exportSymbol('proto.servercomm.PumpStatus', null, global);
goog.exportSymbol('proto.servercomm.PumpTrxn', null, global);
goog.exportSymbol('proto.servercomm.TankInventory', null, global);
goog.exportSymbol('proto.servercomm.deviceData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.servercomm.deviceData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.servercomm.deviceData.repeatedFields_, null);
};
goog.inherits(proto.servercomm.deviceData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.servercomm.deviceData.displayName = 'proto.servercomm.deviceData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.servercomm.PumpStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.servercomm.PumpStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.servercomm.PumpStatus.displayName = 'proto.servercomm.PumpStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.servercomm.PumpTrxn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.servercomm.PumpTrxn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.servercomm.PumpTrxn.displayName = 'proto.servercomm.PumpTrxn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.servercomm.TankInventory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.servercomm.TankInventory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.servercomm.TankInventory.displayName = 'proto.servercomm.TankInventory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.servercomm.DeviceStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.servercomm.DeviceStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.servercomm.DeviceStatus.displayName = 'proto.servercomm.DeviceStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.servercomm.NozzleTotalizer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.servercomm.NozzleTotalizer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.servercomm.NozzleTotalizer.displayName = 'proto.servercomm.NozzleTotalizer';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.servercomm.deviceData.repeatedFields_ = [3,4,5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.servercomm.deviceData.prototype.toObject = function(opt_includeInstance) {
  return proto.servercomm.deviceData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.servercomm.deviceData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servercomm.deviceData.toObject = function(includeInstance, msg) {
  var f, obj = {
    rocode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    msgid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    pumpstatusList: jspb.Message.toObjectList(msg.getPumpstatusList(),
    proto.servercomm.PumpStatus.toObject, includeInstance),
    pumptrxnList: jspb.Message.toObjectList(msg.getPumptrxnList(),
    proto.servercomm.PumpTrxn.toObject, includeInstance),
    tankinventoryList: jspb.Message.toObjectList(msg.getTankinventoryList(),
    proto.servercomm.TankInventory.toObject, includeInstance),
    devicestatusList: jspb.Message.toObjectList(msg.getDevicestatusList(),
    proto.servercomm.DeviceStatus.toObject, includeInstance),
    nozzletotalizerList: jspb.Message.toObjectList(msg.getNozzletotalizerList(),
    proto.servercomm.NozzleTotalizer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.servercomm.deviceData}
 */
proto.servercomm.deviceData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.servercomm.deviceData;
  return proto.servercomm.deviceData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.servercomm.deviceData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.servercomm.deviceData}
 */
proto.servercomm.deviceData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRocode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgid(value);
      break;
    case 3:
      var value = new proto.servercomm.PumpStatus;
      reader.readMessage(value,proto.servercomm.PumpStatus.deserializeBinaryFromReader);
      msg.addPumpstatus(value);
      break;
    case 4:
      var value = new proto.servercomm.PumpTrxn;
      reader.readMessage(value,proto.servercomm.PumpTrxn.deserializeBinaryFromReader);
      msg.addPumptrxn(value);
      break;
    case 5:
      var value = new proto.servercomm.TankInventory;
      reader.readMessage(value,proto.servercomm.TankInventory.deserializeBinaryFromReader);
      msg.addTankinventory(value);
      break;
    case 6:
      var value = new proto.servercomm.DeviceStatus;
      reader.readMessage(value,proto.servercomm.DeviceStatus.deserializeBinaryFromReader);
      msg.addDevicestatus(value);
      break;
    case 7:
      var value = new proto.servercomm.NozzleTotalizer;
      reader.readMessage(value,proto.servercomm.NozzleTotalizer.deserializeBinaryFromReader);
      msg.addNozzletotalizer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.servercomm.deviceData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.servercomm.deviceData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.servercomm.deviceData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servercomm.deviceData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPumpstatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.servercomm.PumpStatus.serializeBinaryToWriter
    );
  }
  f = message.getPumptrxnList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.servercomm.PumpTrxn.serializeBinaryToWriter
    );
  }
  f = message.getTankinventoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.servercomm.TankInventory.serializeBinaryToWriter
    );
  }
  f = message.getDevicestatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.servercomm.DeviceStatus.serializeBinaryToWriter
    );
  }
  f = message.getNozzletotalizerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.servercomm.NozzleTotalizer.serializeBinaryToWriter
    );
  }
};


/**
 * required uint32 rocode = 1;
 * @return {number}
 */
proto.servercomm.deviceData.prototype.getRocode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.deviceData} returns this
 */
proto.servercomm.deviceData.prototype.setRocode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.deviceData} returns this
 */
proto.servercomm.deviceData.prototype.clearRocode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.deviceData.prototype.hasRocode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 msgId = 2;
 * @return {number}
 */
proto.servercomm.deviceData.prototype.getMsgid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.deviceData} returns this
 */
proto.servercomm.deviceData.prototype.setMsgid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.deviceData} returns this
 */
proto.servercomm.deviceData.prototype.clearMsgid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.deviceData.prototype.hasMsgid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated PumpStatus pumpStatus = 3;
 * @return {!Array<!proto.servercomm.PumpStatus>}
 */
proto.servercomm.deviceData.prototype.getPumpstatusList = function() {
  return /** @type{!Array<!proto.servercomm.PumpStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.servercomm.PumpStatus, 3));
};


/**
 * @param {!Array<!proto.servercomm.PumpStatus>} value
 * @return {!proto.servercomm.deviceData} returns this
*/
proto.servercomm.deviceData.prototype.setPumpstatusList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.servercomm.PumpStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.servercomm.PumpStatus}
 */
proto.servercomm.deviceData.prototype.addPumpstatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.servercomm.PumpStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.servercomm.deviceData} returns this
 */
proto.servercomm.deviceData.prototype.clearPumpstatusList = function() {
  return this.setPumpstatusList([]);
};


/**
 * repeated PumpTrxn pumpTrxn = 4;
 * @return {!Array<!proto.servercomm.PumpTrxn>}
 */
proto.servercomm.deviceData.prototype.getPumptrxnList = function() {
  return /** @type{!Array<!proto.servercomm.PumpTrxn>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.servercomm.PumpTrxn, 4));
};


/**
 * @param {!Array<!proto.servercomm.PumpTrxn>} value
 * @return {!proto.servercomm.deviceData} returns this
*/
proto.servercomm.deviceData.prototype.setPumptrxnList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.servercomm.PumpTrxn=} opt_value
 * @param {number=} opt_index
 * @return {!proto.servercomm.PumpTrxn}
 */
proto.servercomm.deviceData.prototype.addPumptrxn = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.servercomm.PumpTrxn, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.servercomm.deviceData} returns this
 */
proto.servercomm.deviceData.prototype.clearPumptrxnList = function() {
  return this.setPumptrxnList([]);
};


/**
 * repeated TankInventory tankInventory = 5;
 * @return {!Array<!proto.servercomm.TankInventory>}
 */
proto.servercomm.deviceData.prototype.getTankinventoryList = function() {
  return /** @type{!Array<!proto.servercomm.TankInventory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.servercomm.TankInventory, 5));
};


/**
 * @param {!Array<!proto.servercomm.TankInventory>} value
 * @return {!proto.servercomm.deviceData} returns this
*/
proto.servercomm.deviceData.prototype.setTankinventoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.servercomm.TankInventory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.servercomm.TankInventory}
 */
proto.servercomm.deviceData.prototype.addTankinventory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.servercomm.TankInventory, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.servercomm.deviceData} returns this
 */
proto.servercomm.deviceData.prototype.clearTankinventoryList = function() {
  return this.setTankinventoryList([]);
};


/**
 * repeated DeviceStatus deviceStatus = 6;
 * @return {!Array<!proto.servercomm.DeviceStatus>}
 */
proto.servercomm.deviceData.prototype.getDevicestatusList = function() {
  return /** @type{!Array<!proto.servercomm.DeviceStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.servercomm.DeviceStatus, 6));
};


/**
 * @param {!Array<!proto.servercomm.DeviceStatus>} value
 * @return {!proto.servercomm.deviceData} returns this
*/
proto.servercomm.deviceData.prototype.setDevicestatusList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.servercomm.DeviceStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.servercomm.DeviceStatus}
 */
proto.servercomm.deviceData.prototype.addDevicestatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.servercomm.DeviceStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.servercomm.deviceData} returns this
 */
proto.servercomm.deviceData.prototype.clearDevicestatusList = function() {
  return this.setDevicestatusList([]);
};


/**
 * repeated NozzleTotalizer nozzleTotalizer = 7;
 * @return {!Array<!proto.servercomm.NozzleTotalizer>}
 */
proto.servercomm.deviceData.prototype.getNozzletotalizerList = function() {
  return /** @type{!Array<!proto.servercomm.NozzleTotalizer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.servercomm.NozzleTotalizer, 7));
};


/**
 * @param {!Array<!proto.servercomm.NozzleTotalizer>} value
 * @return {!proto.servercomm.deviceData} returns this
*/
proto.servercomm.deviceData.prototype.setNozzletotalizerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.servercomm.NozzleTotalizer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.servercomm.NozzleTotalizer}
 */
proto.servercomm.deviceData.prototype.addNozzletotalizer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.servercomm.NozzleTotalizer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.servercomm.deviceData} returns this
 */
proto.servercomm.deviceData.prototype.clearNozzletotalizerList = function() {
  return this.setNozzletotalizerList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.servercomm.PumpStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.servercomm.PumpStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.servercomm.PumpStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servercomm.PumpStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    autoid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    status: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    nozzleautoid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    trxnvolume: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    trxnamount: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.servercomm.PumpStatus}
 */
proto.servercomm.PumpStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.servercomm.PumpStatus;
  return proto.servercomm.PumpStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.servercomm.PumpStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.servercomm.PumpStatus}
 */
proto.servercomm.PumpStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNozzleautoid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTrxnvolume(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTrxnamount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.servercomm.PumpStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.servercomm.PumpStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.servercomm.PumpStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servercomm.PumpStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * required uint32 autoId = 1;
 * @return {number}
 */
proto.servercomm.PumpStatus.prototype.getAutoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpStatus} returns this
 */
proto.servercomm.PumpStatus.prototype.setAutoid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpStatus} returns this
 */
proto.servercomm.PumpStatus.prototype.clearAutoid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpStatus.prototype.hasAutoid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 status = 2;
 * @return {number}
 */
proto.servercomm.PumpStatus.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpStatus} returns this
 */
proto.servercomm.PumpStatus.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpStatus} returns this
 */
proto.servercomm.PumpStatus.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpStatus.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 nozzleAutoId = 3;
 * @return {number}
 */
proto.servercomm.PumpStatus.prototype.getNozzleautoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpStatus} returns this
 */
proto.servercomm.PumpStatus.prototype.setNozzleautoid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpStatus} returns this
 */
proto.servercomm.PumpStatus.prototype.clearNozzleautoid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpStatus.prototype.hasNozzleautoid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float trxnVolume = 4;
 * @return {number}
 */
proto.servercomm.PumpStatus.prototype.getTrxnvolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpStatus} returns this
 */
proto.servercomm.PumpStatus.prototype.setTrxnvolume = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpStatus} returns this
 */
proto.servercomm.PumpStatus.prototype.clearTrxnvolume = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpStatus.prototype.hasTrxnvolume = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required float trxnAmount = 5;
 * @return {number}
 */
proto.servercomm.PumpStatus.prototype.getTrxnamount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpStatus} returns this
 */
proto.servercomm.PumpStatus.prototype.setTrxnamount = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpStatus} returns this
 */
proto.servercomm.PumpStatus.prototype.clearTrxnamount = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpStatus.prototype.hasTrxnamount = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.servercomm.PumpTrxn.prototype.toObject = function(opt_includeInstance) {
  return proto.servercomm.PumpTrxn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.servercomm.PumpTrxn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servercomm.PumpTrxn.toObject = function(includeInstance, msg) {
  var f, obj = {
    autoid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    trxnvolume: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
    trxnamount: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    unitrate: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    startvolumetotalizer: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    endvolumetotalizer: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    presettype: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    presetmode: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    presetvalue: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    trxnid: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    trxnstarttime: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    trxnendtime: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    shiftautoid: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    moptype: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f,
    vehicleno: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f,
    mobileno: (f = jspb.Message.getField(msg, 16)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.servercomm.PumpTrxn}
 */
proto.servercomm.PumpTrxn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.servercomm.PumpTrxn;
  return proto.servercomm.PumpTrxn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.servercomm.PumpTrxn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.servercomm.PumpTrxn}
 */
proto.servercomm.PumpTrxn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTrxnvolume(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTrxnamount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUnitrate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartvolumetotalizer(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndvolumetotalizer(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPresettype(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPresetmode(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPresetvalue(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTrxnid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrxnstarttime(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrxnendtime(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setShiftautoid(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMoptype(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVehicleno(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMobileno(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.servercomm.PumpTrxn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.servercomm.PumpTrxn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.servercomm.PumpTrxn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servercomm.PumpTrxn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeUint32(
      16,
      f
    );
  }
};


/**
 * required uint32 autoId = 1;
 * @return {number}
 */
proto.servercomm.PumpTrxn.prototype.getAutoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setAutoid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearAutoid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasAutoid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float trxnVolume = 2;
 * @return {number}
 */
proto.servercomm.PumpTrxn.prototype.getTrxnvolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setTrxnvolume = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearTrxnvolume = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasTrxnvolume = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float trxnAmount = 3;
 * @return {number}
 */
proto.servercomm.PumpTrxn.prototype.getTrxnamount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setTrxnamount = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearTrxnamount = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasTrxnamount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float unitRate = 4;
 * @return {number}
 */
proto.servercomm.PumpTrxn.prototype.getUnitrate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setUnitrate = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearUnitrate = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasUnitrate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required double startVolumeTotalizer = 5;
 * @return {number}
 */
proto.servercomm.PumpTrxn.prototype.getStartvolumetotalizer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setStartvolumetotalizer = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearStartvolumetotalizer = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasStartvolumetotalizer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required double endVolumeTotalizer = 6;
 * @return {number}
 */
proto.servercomm.PumpTrxn.prototype.getEndvolumetotalizer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setEndvolumetotalizer = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearEndvolumetotalizer = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasEndvolumetotalizer = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 presetType = 7;
 * @return {number}
 */
proto.servercomm.PumpTrxn.prototype.getPresettype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setPresettype = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearPresettype = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasPresettype = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint32 presetMode = 8;
 * @return {number}
 */
proto.servercomm.PumpTrxn.prototype.getPresetmode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setPresetmode = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearPresetmode = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasPresetmode = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float presetValue = 9;
 * @return {number}
 */
proto.servercomm.PumpTrxn.prototype.getPresetvalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setPresetvalue = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearPresetvalue = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasPresetvalue = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required uint32 trxnId = 10;
 * @return {number}
 */
proto.servercomm.PumpTrxn.prototype.getTrxnid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setTrxnid = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearTrxnid = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasTrxnid = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required string trxnStartTime = 11;
 * @return {string}
 */
proto.servercomm.PumpTrxn.prototype.getTrxnstarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setTrxnstarttime = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearTrxnstarttime = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasTrxnstarttime = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required string trxnEndTime = 12;
 * @return {string}
 */
proto.servercomm.PumpTrxn.prototype.getTrxnendtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setTrxnendtime = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearTrxnendtime = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasTrxnendtime = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required uint32 shiftAutoId = 13;
 * @return {number}
 */
proto.servercomm.PumpTrxn.prototype.getShiftautoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setShiftautoid = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearShiftautoid = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasShiftautoid = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required uint32 mopType = 14;
 * @return {number}
 */
proto.servercomm.PumpTrxn.prototype.getMoptype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setMoptype = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearMoptype = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasMoptype = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint32 vehicleNo = 15;
 * @return {number}
 */
proto.servercomm.PumpTrxn.prototype.getVehicleno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setVehicleno = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearVehicleno = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasVehicleno = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional uint32 mobileNo = 16;
 * @return {number}
 */
proto.servercomm.PumpTrxn.prototype.getMobileno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.setMobileno = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.PumpTrxn} returns this
 */
proto.servercomm.PumpTrxn.prototype.clearMobileno = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.PumpTrxn.prototype.hasMobileno = function() {
  return jspb.Message.getField(this, 16) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.servercomm.TankInventory.prototype.toObject = function(opt_includeInstance) {
  return proto.servercomm.TankInventory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.servercomm.TankInventory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servercomm.TankInventory.toObject = function(includeInstance, msg) {
  var f, obj = {
    autoid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    inventorytype: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    productlevel: (f = jspb.Message.getOptionalFloatingPointField(msg, 3)) == null ? undefined : f,
    waterlevel: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    productvolume: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    watervolume: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    ullage: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
    temperature: (f = jspb.Message.getOptionalFloatingPointField(msg, 8)) == null ? undefined : f,
    density: (f = jspb.Message.getOptionalFloatingPointField(msg, 9)) == null ? undefined : f,
    tcdensity: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    inventorytime: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    state: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    shiftautoid: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    dayautoid: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.servercomm.TankInventory}
 */
proto.servercomm.TankInventory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.servercomm.TankInventory;
  return proto.servercomm.TankInventory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.servercomm.TankInventory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.servercomm.TankInventory}
 */
proto.servercomm.TankInventory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInventorytype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProductlevel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWaterlevel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProductvolume(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWatervolume(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUllage(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTemperature(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDensity(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTcdensity(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setInventorytime(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setState(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setShiftautoid(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDayautoid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.servercomm.TankInventory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.servercomm.TankInventory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.servercomm.TankInventory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servercomm.TankInventory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint32(
      14,
      f
    );
  }
};


/**
 * required uint32 autoId = 1;
 * @return {number}
 */
proto.servercomm.TankInventory.prototype.getAutoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.setAutoid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.clearAutoid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.TankInventory.prototype.hasAutoid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 inventoryType = 2;
 * @return {number}
 */
proto.servercomm.TankInventory.prototype.getInventorytype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.setInventorytype = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.clearInventorytype = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.TankInventory.prototype.hasInventorytype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float productLevel = 3;
 * @return {number}
 */
proto.servercomm.TankInventory.prototype.getProductlevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.setProductlevel = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.clearProductlevel = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.TankInventory.prototype.hasProductlevel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float waterLevel = 4;
 * @return {number}
 */
proto.servercomm.TankInventory.prototype.getWaterlevel = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.setWaterlevel = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.clearWaterlevel = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.TankInventory.prototype.hasWaterlevel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required float productVolume = 5;
 * @return {number}
 */
proto.servercomm.TankInventory.prototype.getProductvolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.setProductvolume = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.clearProductvolume = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.TankInventory.prototype.hasProductvolume = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required float waterVolume = 6;
 * @return {number}
 */
proto.servercomm.TankInventory.prototype.getWatervolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.setWatervolume = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.clearWatervolume = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.TankInventory.prototype.hasWatervolume = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required float ullage = 7;
 * @return {number}
 */
proto.servercomm.TankInventory.prototype.getUllage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.setUllage = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.clearUllage = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.TankInventory.prototype.hasUllage = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required float temperature = 8;
 * @return {number}
 */
proto.servercomm.TankInventory.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.setTemperature = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.clearTemperature = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.TankInventory.prototype.hasTemperature = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional float density = 9;
 * @return {number}
 */
proto.servercomm.TankInventory.prototype.getDensity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.setDensity = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.clearDensity = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.TankInventory.prototype.hasDensity = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float tcDensity = 10;
 * @return {number}
 */
proto.servercomm.TankInventory.prototype.getTcdensity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.setTcdensity = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.clearTcdensity = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.TankInventory.prototype.hasTcdensity = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required string inventoryTime = 11;
 * @return {string}
 */
proto.servercomm.TankInventory.prototype.getInventorytime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.setInventorytime = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.clearInventorytime = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.TankInventory.prototype.hasInventorytime = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required uint32 state = 12;
 * @return {number}
 */
proto.servercomm.TankInventory.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.setState = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.clearState = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.TankInventory.prototype.hasState = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required uint32 shiftAutoId = 13;
 * @return {number}
 */
proto.servercomm.TankInventory.prototype.getShiftautoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.setShiftautoid = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.clearShiftautoid = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.TankInventory.prototype.hasShiftautoid = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required uint32 dayAutoId = 14;
 * @return {number}
 */
proto.servercomm.TankInventory.prototype.getDayautoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.setDayautoid = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.TankInventory} returns this
 */
proto.servercomm.TankInventory.prototype.clearDayautoid = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.TankInventory.prototype.hasDayautoid = function() {
  return jspb.Message.getField(this, 14) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.servercomm.DeviceStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.servercomm.DeviceStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.servercomm.DeviceStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servercomm.DeviceStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    autoid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    status: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    swversion: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    hwversion: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.servercomm.DeviceStatus}
 */
proto.servercomm.DeviceStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.servercomm.DeviceStatus;
  return proto.servercomm.DeviceStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.servercomm.DeviceStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.servercomm.DeviceStatus}
 */
proto.servercomm.DeviceStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAutoid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSwversion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHwversion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.servercomm.DeviceStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.servercomm.DeviceStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.servercomm.DeviceStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servercomm.DeviceStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint32 autoId = 1;
 * @return {number}
 */
proto.servercomm.DeviceStatus.prototype.getAutoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.DeviceStatus} returns this
 */
proto.servercomm.DeviceStatus.prototype.setAutoid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.DeviceStatus} returns this
 */
proto.servercomm.DeviceStatus.prototype.clearAutoid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.DeviceStatus.prototype.hasAutoid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 status = 2;
 * @return {number}
 */
proto.servercomm.DeviceStatus.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.DeviceStatus} returns this
 */
proto.servercomm.DeviceStatus.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.DeviceStatus} returns this
 */
proto.servercomm.DeviceStatus.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.DeviceStatus.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 swVersion = 3;
 * @return {number}
 */
proto.servercomm.DeviceStatus.prototype.getSwversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.DeviceStatus} returns this
 */
proto.servercomm.DeviceStatus.prototype.setSwversion = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.DeviceStatus} returns this
 */
proto.servercomm.DeviceStatus.prototype.clearSwversion = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.DeviceStatus.prototype.hasSwversion = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 hwVersion = 4;
 * @return {number}
 */
proto.servercomm.DeviceStatus.prototype.getHwversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.DeviceStatus} returns this
 */
proto.servercomm.DeviceStatus.prototype.setHwversion = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.DeviceStatus} returns this
 */
proto.servercomm.DeviceStatus.prototype.clearHwversion = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.DeviceStatus.prototype.hasHwversion = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.servercomm.NozzleTotalizer.prototype.toObject = function(opt_includeInstance) {
  return proto.servercomm.NozzleTotalizer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.servercomm.NozzleTotalizer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servercomm.NozzleTotalizer.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalizertype: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    dayautoid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    shiftautoid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    nozzleautoid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    volumetotalizer: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
    totalvolumesale: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    totalamountsale: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.servercomm.NozzleTotalizer}
 */
proto.servercomm.NozzleTotalizer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.servercomm.NozzleTotalizer;
  return proto.servercomm.NozzleTotalizer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.servercomm.NozzleTotalizer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.servercomm.NozzleTotalizer}
 */
proto.servercomm.NozzleTotalizer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalizertype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDayautoid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setShiftautoid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNozzleautoid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVolumetotalizer(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalvolumesale(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalamountsale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.servercomm.NozzleTotalizer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.servercomm.NozzleTotalizer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.servercomm.NozzleTotalizer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.servercomm.NozzleTotalizer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeDouble(
      7,
      f
    );
  }
};


/**
 * required uint32 totalizerType = 1;
 * @return {number}
 */
proto.servercomm.NozzleTotalizer.prototype.getTotalizertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.NozzleTotalizer} returns this
 */
proto.servercomm.NozzleTotalizer.prototype.setTotalizertype = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.NozzleTotalizer} returns this
 */
proto.servercomm.NozzleTotalizer.prototype.clearTotalizertype = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.NozzleTotalizer.prototype.hasTotalizertype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 dayAutoId = 2;
 * @return {number}
 */
proto.servercomm.NozzleTotalizer.prototype.getDayautoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.NozzleTotalizer} returns this
 */
proto.servercomm.NozzleTotalizer.prototype.setDayautoid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.NozzleTotalizer} returns this
 */
proto.servercomm.NozzleTotalizer.prototype.clearDayautoid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.NozzleTotalizer.prototype.hasDayautoid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 shiftAutoId = 3;
 * @return {number}
 */
proto.servercomm.NozzleTotalizer.prototype.getShiftautoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.NozzleTotalizer} returns this
 */
proto.servercomm.NozzleTotalizer.prototype.setShiftautoid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.NozzleTotalizer} returns this
 */
proto.servercomm.NozzleTotalizer.prototype.clearShiftautoid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.NozzleTotalizer.prototype.hasShiftautoid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 nozzleAutoId = 4;
 * @return {number}
 */
proto.servercomm.NozzleTotalizer.prototype.getNozzleautoid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.NozzleTotalizer} returns this
 */
proto.servercomm.NozzleTotalizer.prototype.setNozzleautoid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.NozzleTotalizer} returns this
 */
proto.servercomm.NozzleTotalizer.prototype.clearNozzleautoid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.NozzleTotalizer.prototype.hasNozzleautoid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required double volumeTotalizer = 5;
 * @return {number}
 */
proto.servercomm.NozzleTotalizer.prototype.getVolumetotalizer = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.NozzleTotalizer} returns this
 */
proto.servercomm.NozzleTotalizer.prototype.setVolumetotalizer = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.NozzleTotalizer} returns this
 */
proto.servercomm.NozzleTotalizer.prototype.clearVolumetotalizer = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.NozzleTotalizer.prototype.hasVolumetotalizer = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required double totalVolumeSale = 6;
 * @return {number}
 */
proto.servercomm.NozzleTotalizer.prototype.getTotalvolumesale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.NozzleTotalizer} returns this
 */
proto.servercomm.NozzleTotalizer.prototype.setTotalvolumesale = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.NozzleTotalizer} returns this
 */
proto.servercomm.NozzleTotalizer.prototype.clearTotalvolumesale = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.NozzleTotalizer.prototype.hasTotalvolumesale = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required double totalAmountSale = 7;
 * @return {number}
 */
proto.servercomm.NozzleTotalizer.prototype.getTotalamountsale = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.servercomm.NozzleTotalizer} returns this
 */
proto.servercomm.NozzleTotalizer.prototype.setTotalamountsale = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.servercomm.NozzleTotalizer} returns this
 */
proto.servercomm.NozzleTotalizer.prototype.clearTotalamountsale = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.servercomm.NozzleTotalizer.prototype.hasTotalamountsale = function() {
  return jspb.Message.getField(this, 7) != null;
};


goog.object.extend(exports, proto.servercomm);
